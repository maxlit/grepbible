stages:
  - test
  - static
  - build
  - release

variables:
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"

cache:
  key: "$CI_COMMIT_REF_SLUG"
  paths:
    - .cache/pip
    - venv/

.python-base:
  image: python:3.11.7
  before_script:
    - python -V  # Print out python version for debugging
    - pip install  --progress-bar off poetry==1.4.2  # Install Poetry
    - poetry -vvv install --no-root

mypy:
  stage: static
  extends: .python-base
  allow_failure: true
  script:
    - pip install mypy
    - python -m mypy */*.py
  when: manual

flake8:
  stage: static
  extends: .python-base
  allow_failure: true
  script:
    - pip install flake8
    - flake8 --max-line=120 */*.py
  when: manual

pylint:
  stage: static
  extends: .python-base
  allow_failure: true
  script:
    - pip install pylint
    - mkdir ./pylint
    - pylint --output-format=text */*.py | tee ./pylint/pylint.log || pylint-exit $?
    - PYLINT_SCORE=$(sed -n 's/^Your code has been rated at \([-0-9.]*\)\/.*/\1/p' ./pylint/pylint.log)
    - anybadge --label=Pylint --file=pylint/pylint.svg --value=$PYLINT_SCORE 2=red 4=orange 8=yellow 10=green
    - echo "Pylint score is $PYLINT_SCORE"
  when: manual
  artifacts:
    paths:
      - ./pylint/

test:
  stage: test
  extends: .python-base
  script:
    - poetry run python -m unittest $(find . -name "test_*.py" ! -name "test_rag.py")

build-package:
  stage: build
  extends: .python-base
  script:
    - pip install poetry-dynamic-versioning
    - poetry build
  artifacts:
    paths:
      - dist/*.whl
      - dist/*.tar.gz

release-package:
  stage: release
  extends: .python-base
  only:
    - tags
  script:
    - pip install poetry-dynamic-versioning twine
    - poetry build
    - TWINE_PASSWORD=${PYPI_PASSWORD} TWINE_USERNAME=${PYPI_USERNAME} python -m twine upload --repository pypi dist/* --verbose
